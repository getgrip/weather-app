{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","titles","react_default","a","createElement","className","Form","form","onSubmit","getWeather","type","name","placeholder","Weather","props","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c419b54.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = titles =>(\r\n    // to assign class in JS write className\r\n    <div>\r\n    <h1 className = \"title-container__title\">Weather Finder</h1> \r\n    <p className = \"title-container__subtitle\">Find out temperature, conditions and more...</p>\r\n     \r\n    </div>\r\n)\r\n\r\nexport default Titles; ","import React from \"react\"; \r\n\r\n//since it's a stateless function we don't have to do class Name extends React.Component\r\n//We are returning only one method thus we don't need return or render type\r\nconst Form = form =>(\r\n    <form onSubmit = {form.getWeather}>\r\n        <input type=\"text\" name = \"city\" placeholder = \"City..\"/>\r\n        <input type=\"text\" name = \"country\" placeholder = \"Country\"/>\r\n        <button>Get Weather</button>\r\n    </form>\r\n)\r\n\r\n\r\nexport default Form; ","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div>\r\n        {/* if satisfies first condition  */}\r\n        <div className=\"weather__in\">\r\n            {\r\n                props.city && props.country && <p className = \"weather__key\">Location: <span className = \"weather__value\"> {props.city}, {props.country}</span> </p>\r\n            }\r\n\r\n            {\r\n                props.temperature && <p className = \"weather__key\">Temperature: <span className =\"weather__value\"> {props.temperature}</span> </p>\r\n            }\r\n\r\n            {\r\n            props.humidity && <p className = \"weather__key\">Humidity: <span className =\"weather__value\" > {props.humidity}%</span></p>\r\n            }\r\n\r\n            {\r\n                props.description && <p className = \"weather__key\">Description: <span className = \"weather__value\"> {props.description}</span></p>\r\n            }\r\n\r\n            {\r\n                props.error && <p className = \"weather__error\">{props.error}</p>\r\n            }\r\n        </div>\r\n\r\n    </div>\r\n)\r\nexport default Weather;","//jshint esversion:6 \nimport React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nconst API_KEY = \"a697413c699f7af8c777a6cd8b73421b\";\n\nclass App extends React.Component {\n  //don't ever directly manipulate state\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`); // call API data \n\n    const data = await api_call.json(); //convert HTML data to JSON file \n    if (city && country) {\n      this.setState({   //create model using the data\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: ''\n      })\n    } else {\n      this.setState({   //create model using the data\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter a value!'\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    city={this.state.city}\n                    country={this.state.country}\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n\n                  />\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}